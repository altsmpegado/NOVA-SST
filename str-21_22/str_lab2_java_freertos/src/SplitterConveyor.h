/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class SplitterConveyor */

#ifndef _Included_SplitterConveyor
#define _Included_SplitterConveyor
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     SplitterConveyor
 * Method:    initializeHardwarePorts
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_initializeHardwarePorts
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1MoveForward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder1MoveForward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1MoveBackward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder1MoveBackward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1Stop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder1Stop
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder2MoveForward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder2MoveForward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder2MoveBackward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder2MoveBackward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder2Stop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder2Stop
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinderStartMoveForward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinderStartMoveForward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinderStartMoveBackward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinderStartMoveBackward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinderStartStop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinderStartStop
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    conveyorMove
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_conveyorMove
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    conveyorStop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_conveyorStop
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    getCylinder1Position
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_getCylinder1Position
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    getCylinder2Position
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_getCylinder2Position
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    getCylinderStartPosition
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_getCylinderStartPosition
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    getIdentificationSensors
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_getIdentificationSensors
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    isCylinder1MovingForward
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_isCylinder1MovingForward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    isCylinder1MovingBackward
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_isCylinder1MovingBackward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    isCylinder2MovingForward
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_isCylinder2MovingForward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    isCylinder2MovingBackward
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_isCylinder2MovingBackward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    isCylinderStartMovingForward
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_isCylinderStartMovingForward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    isCylinderStartMovingBackward
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_isCylinderStartMovingBackward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    isPartAtDock1
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_isPartAtDock1
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    isPartAtDock2
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_isPartAtDock2
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    isDock1Active
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_isDock1Active
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    isDock2Active
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_isDock2Active
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    isDockEndActive
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_isDockEndActive
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    isLEDActive
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_isLEDActive
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    readPort
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_readPort
  (JNIEnv *, jclass, jint);

/*
 * Class:     SplitterConveyor
 * Method:    writePort
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_writePort
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     SplitterConveyor
 * Method:    setBitValue
 * Signature: (III)V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_setBitValue
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     SplitterConveyor
 * Method:    flashLED
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_flashLED
  (JNIEnv *, jclass, jint);

#ifdef __cplusplus
}
#endif
#endif
